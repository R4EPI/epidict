% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_data.R
\name{gen_data}
\alias{gen_data}
\title{Generate random linelist or survey data}
\usage{
gen_data(
  dictionary,
  varnames = "data_element_shortname",
  numcases = 300,
  org = "MSF"
)
}
\arguments{
\item{dictionary}{Specify which dictionary you would like to use.}

\item{varnames}{Specify name of column that contains varnames. Currently
default set to "Item".  (this can probably be deleted once dictionaries
standardise) If \code{dictionary} is "Mortality", \code{varnames} needs to be
"column_name"`.}

\item{numcases}{Specify the number of cases you want (default is 300)}

\item{org}{the organization the dictionary belongs to. Currently, only MSF
exists. In the future, dictionaries from WHO and other organizations may
become available.}
}
\value{
a data frame with cases in rows and varaibles in columns. The number
of columns will vary from dictionary to ditctionary, so please use the
dictionary functions to generate a corresponding dictionary.
}
\description{
Generate random linelist or survey data
}
\examples{

if (require("dplyr") & require("matchmaker")) {
  withAutoprint({
    # You will often want to use MSF dictionaries to translate codes to human-
    # readable variables. Here, we generate a data set of 20 cases:
    dat <- gen_data(
      dictionary = "Cholera", varnames = "data_element_shortname",
      numcases = 20, org = "MSF"
    )
    print(dat)

    # We want the expanded dictionary, so we will select `compact = FALSE`
    dict <- msf_dict(disease = "Cholera", long = TRUE, compact = FALSE, tibble = TRUE)
    print(dict)

    # We can use linelist's clean_variable_spelling to translate the codes. First,
    # we want to reorder the columns of the dictionary like so:
    #
    #  - 1st column: option codes
    #  - 2nd column: translations
    #  - 3rd column: data column name
    #  - 4th column: order of options

    # Now we can use linelist to filter the data:
    dat_clean <- matchmaker::match_df(dat, dict,
      from = "option_code",
      to = "option_name",
      by = "data_element_shortname",
      order = "option_order_in_set"
    )
    print(dat_clean)
  })
}
}
