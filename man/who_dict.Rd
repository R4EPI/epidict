% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/who_dict.R
\name{who_dict}
\alias{who_dict}
\title{WHO data dictionaries and dummy datasets}
\usage{
who_dict(
  disease,
  name = "WHO-outbreak-dict.xlsx",
  tibble = TRUE,
  compact = TRUE,
  long = TRUE
)
}
\arguments{
\item{disease}{Specify which disease you would like to use.
\itemize{
\item \code{who_dict()} supports "Cholera"
}}

\item{name}{the name of the dictionary stored in the package.}

\item{tibble}{Return data dictionary as a tidyverse tibble (default is TRUE)}

\item{compact}{if \code{TRUE} (default), then a nested data frame is returned
where each row represents a single variable and a nested data frame column
called "options", which can be expanded with \code{\link[tidyr:unnest]{tidyr::unnest()}}. This only
works if \code{long = TRUE}.}

\item{long}{If \code{TRUE} (default), the returned data dictionary is in long
format with each option getting one row. If \code{FALSE}, then two data frames
are returned, one with variables and the other with content options.}
}
\description{
These function produces WHO AFRO dictionaries based on excel data sets
defining the data element name, code, short names, types, and key/value pairs
for translating the codes into human-readable format.Nb dictionary format is
based of MSF OCA DHIS2.
}
\examples{

if (require("dplyr") & require("matchmaker")) {
  withAutoprint({
    # You will often want to use WHO dictionaries to translate codes to human-
    # readable variables. Here, we generate a data set of 20 cases:
    dat <- gen_data(
      dictionary = "Cholera",
      varnames = "data_element_shortname",
      numcases = 20,
      org = "WHO"
    )
    print(dat)

    # We want the expanded dictionary, so we will select `compact = FALSE`
    dict <- who_dict(disease = "Cholera", long = TRUE, compact = FALSE, tibble = TRUE)
    print(dict)

    # Now we can use matchmaker to filter the data:
    dat_clean <- matchmaker::match_df(dat, dict,
      from = "option_code",
      to = "option_name",
      by = "data_element_shortname",
      order = "option_order_in_set"
    )
    print(dat_clean)
  })
}
}
\seealso{
\code{\link[matchmaker:match_df]{matchmaker::match_df()}} \code{\link[=gen_data]{gen_data()}} \code{\link[=msf_dict]{msf_dict()}} \code{\link[=msf_dict_survey]{msf_dict_survey()}}
}
